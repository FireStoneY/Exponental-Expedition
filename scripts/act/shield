var radius, sDuration, pDuration, list, dpower, type; // type = "shield" / "pulsar"
radius    = argument0;
sDuration = argument1;
pDuration = argument2;
dpower    = argument3;
type      = argument4;
list	  = ds_list_create();

switch (type) {
	
	#region SHIELD
	
	case "shield":
				
		if (instance_exists(MainBulletClass)) and (canDefend) {
			
			canDefend = false;
			
			collision_circle_list(phy_position_x, phy_position_y, radius * 2.5, MainBulletClass, false, true, list, false);
	
			var inst, dir;
	
			for (var i = 0; i < ds_list_size(list); i++) {
			
				inst = ds_list_find_value(list, i);
		
				if (inst.shield_destroys) 
				{ instance_destroy(inst); }
				else
				{
					dir = point_direction(phy_position_x, phy_position_y, inst.phy_position_x, inst.phy_position_y);
		
					with (inst) 			
						if (inst.object_index != oLaser) {
					
							move(dir, "impulse", dpower); 
							inst.phy_fixed_rotation = false;           
							physics_apply_angular_impulse(random_range(-1, 1));
						}		
				}
			}
		}

		break;
	#endregion	
	
	#region PULSAR
	
	case "pulsar":
		
		if (canDefend) {

			if (!pulsarCrated) { 
				
				pulsarCrated = 1;
				
				pulsar = instance_create(phy_position_x, phy_position_y, oPulsar); 
				
				pulsar.owner = self;
				
				pulsar.depth = weaponType.depth - 1;
			}

			if (pDuration <= 0)
			{ canDefend = false; instance_destroy(pulsar); pulsarCrated = 0; }
			
			pDuration--;
			
			draw_circle_color(phy_position_x, phy_position_y, radius, c_navy, c_navy, 1);
		}	
		break;
		
	#endregion
}

ds_list_destroy(list);
draw_set_alpha(1);

return pDuration;
